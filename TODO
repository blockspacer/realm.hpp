* add docs generation and documentation

* redo block memory allocation/iteration

* optimization (try to get results close to similar projects while iterating entities)

* add parallel-iteration support (using std::execution/tbb)

* better query api
  * paralell queries
    realm::query_par ? runs all chunks in parallell
    maybe only allow par with systems in world?

  * example fetch iterator (std::algo compatible iterator):
    auto q = query::of<pos, const vel>();
    alt. query<pos, const vel>(); if types cant be saved
    for (auto [p, v] : query.fetch(&world)) {
        // typeof pos = pos&
        // typeof v = const vel&
    }
  * alt. if i want to use current "functional" approach of realm::query
    for (auto [p, v] : realm::query_iter<pos, const vel>(&world)) {
        // typeof pos = pos&
        // typeof v = const vel&
    }


* add tag/flag components (components who doesnt occupy memory, no data)

* add static components/instances (components whose data never changes doesnt have to be reallocated)

* better tests/benchs (and link library)

* integrate conan

* impl component fetch_types / event-system in queries ex,
    * emit<pos>     -> doesnt query pos but declares that it will create pos as an event
    * listen<pos>   -> declares the query will listen on emit of pos (allows to create a DAG graph of systems)
    * changed<pos>  -> query is called only if pos is changed
    these shold not be in the lambda (a additional template param maybe?)
    * not<pos>      -> exclude a component is a query
    * .....

* when more c++20 features are default impl. modules, coroutines & ranges