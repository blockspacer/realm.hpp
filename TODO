TODO/Roadmap

Version 0.1:

* generate docs & comments for archetype

* optimization (try to get results close to similar projects while iterating entities)

* solve compiler warnings / cleanup

* better tests/benchs (and link library)

* test latest versions of all major compilers (msvc, clang, gcc)

* update readme

Version 0.2:

* add a snapshotting feature for syncing of entities in ex multiplayer games

* re-add concepts instead of enable_if

* better/more comments

* fix view to support realm::entity

* add static components/instances (components whose data never changes doesnt have to be reallocated)

Further features:

* better multi-threading (eg. create a dependency graph on systems for even more parallelization)

* when more c++20 features are default impl. modules, coroutines & ranges

* allow undefined allocation capacity, eg. grow when needed

* add tag/flag components (components who doesnt occupy memory, no data)

* add std::optional when getting components?

* integrate conan

* impl. advanced component fetch_types / event-system in queries ex,
    * emit<pos>     -> doesnt query pos but declares that it will create pos as an event
        note: fetches emitter<pos> in query with function .emit(pos&& p) that will emit and event to the event stack in world

    * listen<pos>   -> declares the query will listen on emit of pos (allows creation of a DAG graph of systems)

    * changed<pos>  -> query is called only if pos is changed
    
    * value constraits such as:
        * bigger<pos, {20, 20}> (has to implement operator</>)
        * smaller<pos, {20,20}>
        * etc...

    * not<pos>      -> exclude a component in a query

* event-based reactive queries
    example: query::changed(&world, [](pos& p){ /* do stuff */} )
    note: query is only called if an archetype_chunk the query matches has changed since last check
